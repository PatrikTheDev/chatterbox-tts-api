# Use NVIDIA PyTorch container with RTX 5090 support (CUDA 12.8 + PyTorch 2.7.0)
FROM nvcr.io/nvidia/pytorch:25.04-py3

# Set environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV DEBIAN_FRONTEND=noninteractive

# Install additional system dependencies and uv
RUN apt-get update && apt-get install -y \
    git \
    wget \
    curl \
    ffmpeg \
    libsndfile1 \
    && rm -rf /var/lib/apt/lists/*

# Install uv
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv

# Set working directory
WORKDIR /app

# Create virtual environment (PyTorch already installed in base image)
RUN uv venv --python 3.10

# Pin PyTorch in the venv to the version validated with vLLM 0.10.0
# (avoid picking an incompatible wheel)
RUN uv pip install --index-url https://download.pytorch.org/whl/cu126 \
    torch==2.7.1 torchaudio==2.7.1 torchvision==0.22.1

# Install base dependencies first
RUN uv pip install setuptools fastapi uvicorn[standard] python-dotenv python-multipart requests psutil huggingface_hub

# Install resemble-perth specifically (required for watermarker)
RUN uv pip install resemble-perth

# Clone and install chatterbox-vllm in development mode to include all source files (like tokenizer.json)
RUN git clone https://github.com/randombk/chatterbox-vllm.git /tmp/chatterbox-vllm && \
    uv pip install -e /tmp/chatterbox-vllm
RUN uv pip install xformers==0.0.31

# Copy application code
COPY app/ ./app/
COPY main.py ./

# Copy t3-model directory (required for chatterbox-vllm)
# This contains config.json and will have symlinks created during initialization
COPY t3-model/ ./t3-model/

# Copy voice sample if it exists (optional, can be mounted)
COPY voice-sample.mp3 ./voice-sample.mp3

# Create directories for model cache and voice library (separate from source code)
RUN mkdir -p /cache /voices

# Set default environment variables (prefer CUDA)
ENV PORT=4123
ENV EXAGGERATION=0.5
ENV TOP_P=0.8
ENV REPETITION_PENALTY=2.0
ENV TEMPERATURE=0.8
ENV VOICE_SAMPLE_PATH=/app/voice-sample.mp3
ENV MAX_CHUNK_LENGTH=280
ENV MAX_TOTAL_LENGTH=3000
ENV DEVICE=cuda
ENV MODEL_CACHE_DIR=/cache
ENV VOICE_LIBRARY_DIR=/voices
ENV HOST=0.0.0.0

# NVIDIA/CUDA environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Add uv venv to PATH (prioritize venv over base image packages)
ENV PATH="/app/.venv/bin:$PATH"

# Expose port
EXPOSE ${PORT}

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5m --retries=3 \
    CMD curl -f http://localhost:${PORT}/health || exit 1

# Run the application using the new entry point
CMD ["python", "main.py"] 